import React from 'react';
import { useState } from 'react';
import CreateButton from './create_button';
import Get from './get';


/* 
・はじめのページにはテーブルがあり、すでにサーバーから取得した情報が並んでいる

・右上に新規作成のボタンを作り、クリックするとモーダルが表示され、情報が入力できるようにする。
 -モーダルには閉じる、登録する等のボタンがありボタンクリックでそれぞれの機能が発火するように仕組む。登録した情報は表とサーバーに追加する。
 -入力ボックスは 姓 名 年齢

・表の行の右端には編集ボタンと削除ボタンがある。
 -編集に関して、ボタンを押すとモーダルが表示され情報を編集できる。編集画面での入力ボックスには、すでに登録されている情報があると良い。
  *モーダルには閉じる、更新する、の2つのボタンを用意し、クリックした時にそれぞれの機能が発火するように仕組む。
 -削除に関して、ボタンをクリックするとその行とサーバ上からその情報が削除されるようにする。

---
イメージ)

                        +新規作成
    ID     名前    年齢
    1     Jhon **  18   編集　削除
    2     Tom ??   21   編集　削除
    3     Jack ++  22   編集　削除
---

・取得した情報をテーブルへ流し込む
・入力した情報をテーブルへ流しこむ

・削除ボタンが表示されない原因
-> 変数が再定義されているため。変数を受け渡し、定義は1度だけさせる形にする。

・modifyは全ての情報が入力されているusersとidの情報が必要。


2022.12.22.
axiosとデータテーブルを用いたものは一通りは完成した。
しかしながら、
・再利用できるコンポーネントが再利用できていないことや、無駄な動きがある。そのため動作が重く、かつバグが起きやすくなっている。
 ->モーダルや入力欄は再利用できそうなので考えてみる。また、編集画面のデフォルト値の表示は、再度サーバーからデータを取得してしまっているので別の方法を考える必要がある。

・間に削除されたデータがある際、編集画面のデフォルト値がIDとは異なるものが表示されてしまう。
 ->配列のインデックスを基準にデータを参照してしまっていることが原因。IDに結びつく情報を直接参照できれば正しく表示できると思われるので、それが実現する方法を考える。

以上の2点が課題。
*/

//useContextの初期値を設定
export const ServerData = React.createContext({} as {
    users: string
    setUsers: React.Dispatch<React.SetStateAction<string>>
})

const Main: React.FC = () => {


    const [users, setUsers] = useState('')

    return (
        <div>
            <ServerData.Provider value={{ users, setUsers }}>
                <CreateButton />
                <Get />
            </ServerData.Provider>
        </div >
    )

}

export default Main;